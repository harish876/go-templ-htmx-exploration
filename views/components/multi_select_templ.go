// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.598
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"encoding/json"
	"fmt"
	"github.com/harish876/go-templ-htmx-exploration/models"
)

func optionsJSON(options []models.SelectOption) string {
	bytes, err := json.Marshal(options)
	if err != nil {
		return ""
	}
	fmt.Println(string(bytes))
	return string(bytes)
}

func MultiSelect(options []models.SelectOption, defaultSelectedOptions []models.SelectOption) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf("{ isOpen: false, selectedOptions: [] }")))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" @click.away=\"isOpen = false\"><label class=\"text-sm font-medium text-gray-700 flex gap-2\">Multi Select</label><section class=\"flex flex-col w-full\" id=\"multiSelect\"><div class=\"w-full py-2\"><div x-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf("multiselect({items: %s})", optionsJSON(options))))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" x-init=\"onInit\" @focusout=\"handleBlur\" class=\"relative\"><div class=\"flex items-center justify-between border rounded-md relative pr-8 bg-white\"><ul class=\"flex flex-wrap flex-row items-center w-full\"><template x-for=\"(selectedItem, idx) in selectedItems\"><li x-text=\"shortenedLabel(selectedItem.label, maxTagChars)\" @click=\"removeElementByIdx(idx)\" @keyup.backspace=\"removeElementByIdx(idx)\" @keyup.delete=\"removeElementByIdx(idx)\" tabindex=\"0\" class=\"relative m-1 px-2 py-1.5 border rounded-md cursor-pointer hover:bg-white hover:text-black after:content-[&#39;x&#39;] after:ml-1.5 transition-all inline-flex items-center justify-center bg-blue-500 text-white\"></li></template><!-- Selected Values --><input name=\"teams[]\" type=\"hidden\" x-bind:value=\"selectedItems.map(d =&gt; d.value)\"><!-- Search Input --><input x-ref=\"searchInput\" x-model=\"search\" @click=\"expanded = true\" @focusin=\"expanded = true\" @input=\"expanded = true\" @keyup.arrow-down=\"expanded = true; selectNextItem()\" @keyup.arrow-up=\"expanded = true; selectPrevItem()\" @keyup.escape=\"reset\" @keyup.enter=\"addActiveItem\" :placeholder=\"searchPlaceholder\" type=\"text\" class=\"w-full rounded-md border-white bg-white text-sm text-gray-700\"><!-- Arrow Icon --><svg @click=\"expanded = !expanded; expanded &amp;&amp; $refs.searchInput.focus()\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" stroke-width=\"0\" fill=\"#ccc\" :class=\"expanded &amp;&amp; &#39;rotate-180&#39;\" class=\"absolute right-2 top-1/2 -translate-y-1/2 cursor-pointer focus:outline-none\" tabindex=\"-1\"><path d=\"M12 17.414 3.293 8.707l1.414-1.414L12 14.586l7.293-7.293 1.414 1.414L12 17.414z\"></path></svg></ul></div><!-- End Item Tags And Input Field --><!-- Start Items List --><template x-if=\"expanded\"><ul x-ref=\"listBox\" class=\"w-full list-none border border-t-0 rounded-md focus:outline-none overflow-y-auto outline-none bg-white absolute left-0 bottom-100\" tabindex=\"0\" :style=\"listBoxStyle\"><!-- Item Element --><template x-if=\"filteredItems.length\"><template x-for=\"(filteredItem, idx) in filteredItems\"><li x-text=\"shortenedLabel(filteredItem.label, maxItemChars)\" @click=\"handleItemClick(filteredItem)\" :class=\"idx === activeIndex &amp;&amp; &#39;bg-blue-500 text-grey-600&#39;\" :title=\"filteredItem.label\" class=\"hover:bg-blue-500 hover:text-white cursor-pointer px-2 py-2\"></li></template></template><!-- Empty Text --><template x-if=\"!filteredItems.length\"><li x-text=\"emptyText\" class=\"cursor-pointer px-2 py-2 text-gray-400\"></li></template></ul></template><!-- End Items List --></div><!-- End Component --></div></section></div><script>\n  function multiselect(config) {\n    return {\n      items: config.items ?? [],\n      allItems: null,\n      selectedItems: null,\n      search: config.search ?? \"\",\n      searchPlaceholder: config.searchPlaceholder ?? \"Type here...\",\n      expanded: config.expanded ?? false,\n      emptyText: config.emptyText ?? \"No items found...\",\n      allowDuplicates: config.allowDuplicates ?? false,\n      size: config.size ?? 4,\n      itemHeight: config.itemHeight ?? 40,\n      maxItemChars: config.maxItemChars ?? 50,\n      maxTagChars: config.maxTagChars ?? 25,\n      activeIndex: -1,\n\n      onInit() {\n        // Set the allItems array since we want to filter later on and keep the original (items) array as reference\n        this.allItems = [...this.items];\n\n        this.$watch(\"filteredItems\", (newValues, oldValues) => {\n          // Reset the activeIndex whenever the filteredItems array changes\n          if (newValues.length !== oldValues.length) this.activeIndex = -1;\n        });\n\n        this.$watch(\"selectedItems\", (newValues, oldValues) => {\n          if (this.allowDuplicates) return;\n\n          // Remove already selected items from the items (allItems) array (if allowDuplicates is false)\n          this.allItems = this.items.filter((item, idx, all) =>\n            newValues.every((n) => n.value !== item.value)\n          );\n        });\n\n        // Scroll to active element whenever activeIndex changes (if expanded is true and we have a value)\n        this.$watch(\"activeIndex\", (newValue, oldValue) => {\n          if (\n            this.activeIndex == -1 ||\n            !this.filteredItems[this.activeIndex] ||\n            !this.expanded\n          )\n            return;\n\n          this.scrollToActiveElement();\n        });\n\n        // Check whether there are selected values or not and set them\n        this.selectedItems = this.items\n          ? this.items.filter((item) => item.selected)\n          : [];\n      },\n\n      handleBlur(e) {\n        // If the current active element (relatedTarget) is a child element of the component itself, return\n        // Note: The current active element must have a tabindex attribute set in order to appear as a relatedTarget\n        if (this.$el.contains(e.relatedTarget)) {\n          return;\n        }\n\n        this.reset();\n      },\n\n      reset() {\n        // 1) Clear the search value\n        this.search = \"\";\n\n        // 2) Close the list\n        this.expanded = false;\n\n        // 3) Reset the active index\n        this.activeIndex = -1;\n      },\n\n      handleItemClick(item) {\n        // 1) Add the item\n        this.selectedItems.push(item);\n\n        // 2) Reset the search input\n        this.search = \"\";\n\n        // 3) Keep the focus on the search input\n        this.$refs.searchInput.focus();\n      },\n\n      selectNextItem() {\n        if (!this.filteredItems.length) return;\n\n        // Array count starts at 0, so we abstract 1\n        if (this.filteredItems.length - 1 == this.activeIndex) {\n          return (this.activeIndex = 0);\n        }\n\n        this.activeIndex++;\n      },\n\n      selectPrevItem() {\n        if (!this.filteredItems.length) return;\n\n        if (this.activeIndex == 0 || this.activeIndex == -1)\n          return (this.activeIndex = this.filteredItems.length - 1);\n\n        this.activeIndex--;\n      },\n\n      addActiveItem() {\n        if (!this.filteredItems[this.activeIndex]) return;\n\n        this.selectedItems.push(this.filteredItems[this.activeIndex]);\n\n        this.search = \"\";\n      },\n\n      scrollToActiveElement() {\n        // Remove the first two child elements since they are <template> tags\n        const availableListElements = [...this.$refs.listBox.children].slice(\n          2,\n          -1\n        );\n\n        // Scroll to active <li> element\n        availableListElements[this.activeIndex].scrollIntoView({\n          block: \"end\",\n        });\n      },\n\n      removeElementByIdx(itemIdx) {\n        this.selectedItems.splice(itemIdx, 1);\n\n        // Focus the input element to keep the blur functionlity\n        // otherwise @focusout on the root element will not be triggered\n        if (!this.selectedItems.length) this.$refs.searchInput.focus();\n      },\n\n      shortenedLabel(label, maxChars) {\n        return !maxChars || label.length <= maxChars\n          ? label\n          : `${label.substr(0, maxChars)}...`;\n      },\n\n      get filteredItems() {\n        return this.allItems.filter((item) =>\n          item.label.toLowerCase().includes(this.search?.toLowerCase())\n        );\n      },\n\n      get listBoxStyle() {\n        // We add 2 since there is border that takes space\n        return {\n          maxHeight: `${this.size * this.itemHeight + 2}px`,\n        };\n      },\n    };\n  }\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
