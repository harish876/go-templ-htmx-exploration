package grid

import (
	"fmt"
	"github.com/harish876/go-templ-htmx-exploration/views/layout"
	"github.com/harish876/go-templ-htmx-exploration/views/components"
	"github.com/harish876/go-templ-htmx-exploration/utils"
	"github.com/harish876/go-templ-htmx-exploration/models"
	"strconv"
)

templ gridPagination(totalPages int, currentPage int, limit int) {
	<div class="flex" x-data={fmt.Sprintf("{ currentPage: %d, totalPages: %d }", currentPage, totalPages)}>
		<a 
			:href="currentPage > 1 ? '?page=' + (currentPage - 1)+ '&limit=10' : '#'" 
			class="px-4 py-2 mx-1 text-gray-700 transition-colors duration-300 transform bg-white rounded-md :bg-gray-800 :text-gray-200 hover:bg-blue-500 :hover:bg-blue-500 hover:text-white :hover:text-gray-200">
			<div class="flex items-center -mx-1">
				<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 mx-1 rtl:-scale-x-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
				</svg>
				<span class="mx-1">
					Previous
				</span>
			</div>
		</a>
		for page := 1; page <= totalPages; page++ {
			<a href={ templ.URL(fmt.Sprintf("/grid?page=%d&limit=%d", page, limit)) } class="hidden px-4 py-2 mx-1 text-gray-700 transition-colors duration-300 transform bg-white rounded-md sm:inline :bg-gray-800 :text-gray-200 hover:bg-blue-500 :hover:bg-blue-500 hover:text-white :hover:text-gray-200">
				{ strconv.Itoa(page) }
			</a>
		}
		<a 
			x-bind:href="currentPage < totalPages ? '?page=' + (currentPage + 1)+ '&limit=10' : '#'"
			class="px-4 py-2 mx-1 text-gray-700 transition-colors duration-300 transform bg-white rounded-md :bg-gray-800 :text-gray-200 hover:bg-blue-500 :hover:bg-blue-500 hover:text-white :hover:text-gray-200">
			<div class="flex items-center -mx-1">
				<span class="mx-1" data-page={ strconv.Itoa(currentPage) }>
					Next
				</span>
				<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 mx-1 rtl:-scale-x-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
				</svg>
			</div>
		</a>
	</div>
}

templ gridHeader() {
	<thead class="bg-gray-50 :bg-gray-800">
		<tr>
			<th scope="col" class="py-3.5 px-4 text-sm font-normal text-left rtl:text-right text-gray-500 :text-gray-400">
				<div class="flex items-center gap-x-3">
					<span>Name</span>
				</div>
			</th>
			<th scope="col" class="px-12 py-3.5 text-sm font-normal text-left rtl:text-right text-gray-500 :text-gray-400">
				<button class="flex items-center gap-x-2">
					<span>Status</span>
					<svg class="h-3" viewBox="0 0 10 11" fill="none" xmlns="http://www.w3.org/2000/svg">
						<path d="M2.13347 0.0999756H2.98516L5.01902 4.79058H3.86226L3.45549 3.79907H1.63772L1.24366 4.79058H0.0996094L2.13347 0.0999756ZM2.54025 1.46012L1.96822 2.92196H3.11227L2.54025 1.46012Z" fill="currentColor" stroke="currentColor" stroke-width="0.1"></path>
						<path d="M0.722656 9.60832L3.09974 6.78633H0.811638V5.87109H4.35819V6.78633L2.01925 9.60832H4.43446V10.5617H0.722656V9.60832Z" fill="currentColor" stroke="currentColor" stroke-width="0.1"></path>
						<path d="M8.45558 7.25664V7.40664H8.60558H9.66065C9.72481 7.40664 9.74667 7.42274 9.75141 7.42691C9.75148 7.42808 9.75146 7.42993 9.75116 7.43262C9.75001 7.44265 9.74458 7.46304 9.72525 7.49314C9.72522 7.4932 9.72518 7.49326 9.72514 7.49332L7.86959 10.3529L7.86924 10.3534C7.83227 10.4109 7.79863 10.418 7.78568 10.418C7.77272 10.418 7.73908 10.4109 7.70211 10.3534L7.70177 10.3529L5.84621 7.49332C5.84617 7.49325 5.84612 7.49318 5.84608 7.49311C5.82677 7.46302 5.82135 7.44264 5.8202 7.43262C5.81989 7.42993 5.81987 7.42808 5.81994 7.42691C5.82469 7.42274 5.84655 7.40664 5.91071 7.40664H6.96578H7.11578V7.25664V0.633865C7.11578 0.42434 7.29014 0.249976 7.49967 0.249976H8.07169C8.28121 0.249976 8.45558 0.42434 8.45558 0.633865V7.25664Z" fill="currentColor" stroke="currentColor" stroke-width="0.3"></path>
					</svg>
				</button>
			</th>
			<th scope="col" class="px-4 py-3.5 text-sm font-normal text-left rtl:text-right text-gray-500 :text-gray-400">
				<button class="flex items-center gap-x-2">
					<span>Role</span>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
						<path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z"></path>
					</svg>
				</button>
			</th>
			<th scope="col" class="px-4 py-3.5 text-sm font-normal text-left rtl:text-right text-gray-500 :text-gray-400">Email address</th>
			<th scope="col" class="px-4 py-3.5 text-sm font-normal text-left rtl:text-right text-gray-500 :text-gray-400">Teams</th>
			<th scope="col" class="relative py-3.5 px-4 text-gray:500">
				<span class="sr-only">Edit</span>
			</th>
		</tr>
	</thead>
}

templ renderGridRow(id string, name string, status string, position string, email string, badges []string, imgSrc string) {
	<tr class="w-full">
		<td class="px-4 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
			<div class="inline-flex items-center gap-x-3">
				<div class="flex items-center gap-x-2">
					// <img class="object-cover w-10 h-10 rounded-full" src={ imgSrc } alt={ id }/>
					<div>
						<h2 class="font-medium text-gray-800 :text-white ">{ name }</h2>
						<p class="text-sm font-normal text-gray-600 :text-gray-400">
							{ id }
						</p>
					</div>
				</div>
			</div>
		</td>
		<td class="px-12 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
			<div class="inline-flex items-center px-3 py-1 rounded-full gap-x-2 bg-emerald-100/60 :bg-gray-800">
				<span class="h-1.5 w-1.5 rounded-full bg-emerald-500"></span>
				<h2 class="text-sm font-normal text-emerald-500">{ utils.StartCase(status) }</h2>
			</div>
		</td>
		<td class="px-4 py-4 text-sm text-gray-500 :text-gray-300 whitespace-nowrap">{ position }</td>
		<td class="px-4 py-4 text-sm text-gray-500 :text-gray-300 whitespace-nowrap">{ email }</td>
		<td class="px-4 py-4 text-sm whitespace-nowrap">
			<div class="flex items-center gap-x-2">
				for _,item := range badges {
					<p class="px-3 py-1 text-xs text-indigo-500 rounded-full :bg-gray-800 bg-indigo-100/60">{ item }</p>
				}
			</div>
		</td>
		<td class="px-4 py-4 text-sm whitespace-nowrap">
			<div class="flex items-center gap-x-6">
				<button
					id="deleteRow"
					class="text-gray-500 transition-colors duration-200 :hover:text-red-500 :text-gray-300 hover:text-red-500 focus:outline-none"
					hx-delete={ fmt.Sprintf("/grid/%s", id) }
					hx-swap="outerHTML swap:1s"
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"></path>
					</svg>
				</button>
				<button
					id="updateRow"
					class="text-gray-500 transition-colors duration-200 :hover:text-yellow-500 :text-gray-300 hover:text-yellow-500 focus:outline-none"
					hx-get={ fmt.Sprintf("/grid/edit/%s", id) }
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"></path>
					</svg>
				</button>
			</div>
		</td>
	</tr>
}

templ renderEditableGridRow(id string, name string, status string, position string, email string, badges []string, imgSrc string) {
	<tr class="editing" hx-trigger="cancel">
		<td class="px-4 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
			<div class="inline-flex items-center gap-x-3">
				<div class="flex items-center gap-x-2">
					<img class="object-cover w-10 h-10 rounded-full" src={ imgSrc } alt={ id }/>
					<div>
						<h2 class="font-medium text-gray-800 :text-white ">{ name }</h2>
						<p class="text-sm font-normal text-gray-600 :text-gray-400">
							{ id }
						</p>
					</div>
				</div>
			</div>
		</td>
		<td class="px-12 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
			<div class="inline-flex items-center rounded-full gap-x-2 :bg-gray-800">
				<h2 class="text-sm font-normal text-emerald-500">
					@components.Select(components.SelectProps{
						Id:    id,
						Name:  "status",
						Class: "block  mt-2 w-full placeholder-gray-400/70 :placeholder-gray-500 rounded-lg border border-gray-200 bg-white px-5 py-2.5 text-gray-700 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40 :border-gray-600 :bg-gray-900 :text-gray-300 :focus:border-blue-300",
						DefaultValue: components.SelectOption{
							Label: utils.StartCase(status),
							Value: status,
						},
						Options: []components.SelectOption{
							{Label: "Active", Value: "active"},
							{Label: "Inactive", Value: "inactive"},
						}})
				</h2>
			</div>
		</td>
		<td class="px-4 py-4 text-sm text-gray-500 :text-gray-300 whitespace-nowrap">
			@components.Input(components.InputProps{
				Id:       id,
				Typ:      components.InputTypeText,
				Name:     "position",
				Value:    position,
				Class:    "mt-1 w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 shadow-sm",
				Required: true,
			})
		</td>
		<td class="px-4 py-4 text-sm text-gray-500 :text-gray-300 whitespace-nowrap">{ email }</td>
		<td class="px-4 py-4 text-sm whitespace-nowrap">
			<div class="flex items-center gap-x-2">
				for _,item := range badges {
					<p class="px-3 py-1 text-xs text-indigo-500 rounded-full :bg-gray-800 bg-indigo-100/60">{ item }</p>
				}
			</div>
		</td>
		<td class="px-4 py-4 text-sm whitespace-nowrap">
			<div class="flex items-center gap-x-6">
				<div class="inline-flex overflow-hidden rounded-md border bg-white shadow-sm">
					<button
						class="inline-block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:relative"
						hx-put={ fmt.Sprintf("/grid/%s", id) }
						hx-include="closest tr"
						id="saveRow"
					>
						<span>Save</span>
					</button>
					<button
						class="inline-block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:relative"
						hx-get={ fmt.Sprintf("/grid/%s", id) }
					>
						<span>Cancel</span>
					</button>
				</div>
			</div>
		</td>
	</tr>
}

templ grid(data models.GridData, totalPages int) {
	<section class="container px-4 mx-auto my-auto">
		<div class="flex flex-col justify-center">
			<div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
				<div class="min-w-full py-2 align-middle md:px-6 lg:px-8">
					<div class="overflow-hidden border border-gray-200 :border-gray-700 md:rounded-lg">
						<table class="min-w-full divide-y divide-gray-200 :divide-gray-700 tr htmx-swapping">
							@gridHeader()
							<tbody
								class="bg-white divide-y divide-gray-200 :divide-gray-700 :bg-gray-900"
								hx-target="closest tr"
								hx-swap="outerHTML"
							>
								for _,row := range data {
									@renderGridRow(row.Id, row.Name, row.Status, row.Position, row.Email, row.Badges, row.Img)
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		<div class="flex justify-center my-4">
			@gridPagination(totalPages, 1, 10)
		</div>
	</section>
}

templ Grid(data models.GridData, totalPages int) {
	@layout.Base("HTMX Grid") {
		@grid(data, totalPages)
	}
}

templ EditRow(row models.GridDataRow) {
	@renderEditableGridRow(row.Id, row.Name, row.Status, row.Position, row.Email, row.Badges, row.Img)
}

templ RenderRow(row models.GridDataRow) {
	@renderGridRow(row.Id, row.Name, row.Status, row.Position, row.Email, row.Badges, row.Img)
}
