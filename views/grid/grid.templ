package grid

import (
	"fmt"
	"github.com/harish876/go-templ-htmx-exploration/views/layout"
	"github.com/harish876/go-templ-htmx-exploration/views/components"
	"github.com/harish876/go-templ-htmx-exploration/utils"
	"github.com/harish876/go-templ-htmx-exploration/models"
	"strconv"
	"reflect"
)

templ gridPagination(pageOptions models.GridPagination) {
	<section class="flex justify-between my-4">
		<div class="flex justify-center">
			if pageOptions.Current > 1 {
				<div
					hx-get={ fmt.Sprintf("/grid?page=%d&limit=%d", pageOptions.Current-1, pageOptions.Limit) }
					hx-target="body"
					class="cursor-pointer px-4 py-2 mx-1 text-gray-700 transition-colors duration-300 transform bg-white rounded-md :bg-gray-800 :text-gray-200 hover:bg-blue-500 :hover:bg-blue-500 hover:text-white :hover:text-gray-200"
				>
					<div class="flex items-center -mx-1">
						<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 mx-1 rtl:-scale-x-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
						</svg>
						<span class="mx-1">
							Previous
						</span>
					</div>
				</div>
			}
			<div class="flex justify-center">
				for page := 1; page <= pageOptions.TotalPages; page++ {
					if page == pageOptions.Current {
						<div
							hx-get={ fmt.Sprintf("/grid?page=%d&limit=%d", page, pageOptions.Limit) }
							hx-target="body"
							class="hidden px-4 py-2 mx-1 text-gray-200 transition-colors duration-300 transform rounded-md sm:inline :bg-gray-800 :text-gray-200 bg-blue-500 :hover:bg-white :hover:bg-blue-500 hover:text-blue :hover:text-gray-700"
						>
							{ strconv.Itoa(page) }
						</div>
					} else {
						<div
							hx-get={ fmt.Sprintf("/grid?page=%d&limit=%d", page, pageOptions.Limit) }
							hx-target="body"
							class="hidden px-4 py-2 mx-1 text-gray-700 transition-colors duration-300 transform bg-white rounded-md sm:inline :bg-gray-800 :text-gray-200 hover:bg-blue-500 :hover:bg-blue-500 hover:text-white :hover:text-gray-200"
						>
							{ strconv.Itoa(page) }
						</div>
					}
				}
			</div>
			if pageOptions.Current < pageOptions.TotalPages {
				<div
					hx-get={ fmt.Sprintf("/grid?page=%d&limit=%d", pageOptions.Current+1, pageOptions.Limit) }
					hx-target="body"
					class="cursor-pointer px-4 py-2 mx-1 text-gray-700 transition-colors duration-300 transform bg-white rounded-md :bg-gray-800 :text-gray-200 hover:bg-blue-500 :hover:bg-blue-500 hover:text-white :hover:text-gray-200"
				>
					<div class="flex items-center -mx-1">
						<span class="mx-1" data-page={ strconv.Itoa(pageOptions.Current) }>
							Next
						</span>
						<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 mx-1 rtl:-scale-x-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
						</svg>
					</div>
				</div>
			}
		</div>
		<div class="text-gray-500 px-4 py-2 mx-1 float-right">
			<span class="font-medium text-gray-700">{ strconv.Itoa(pageOptions.Current) } - { strconv.Itoa(pageOptions.TotalPages) }</span> of Pages
		</div>
	</section>
}

templ gridHeader(columns []models.GridColumn) {
	<thead class="bg-gray-50 :bg-gray-800">
		<tr>
			for _,column := range columns {
				<th scope="col" class="py-3.5 px-4 text-sm font-normal text-left rtl:text-right text-gray-500 :text-gray-400">
					<div class="flex items-center gap-x-3">
						<span>{ column.Label }</span>
					</div>
				</th>
			}
			<th scope="col" class="py-3.5 px-4 text-gray:500">
				<span class="sr-only">Edit</span>
			</th>
		</tr>
	</thead>
}

templ renderGridRow[D any](columns []models.GridColumn, row D) {
	<tr class="w-full">
		for _, column := range columns {
			@rowRenderer(row, column)
		}
		<td class="px-4 py-4 text-sm whitespace-nowrap">
			<div class="flex items-center gap-x-6">
				<button
					id="deleteRow"
					class="text-gray-500 transition-colors duration-200 :hover:text-red-500 :text-gray-300 hover:text-red-500 focus:outline-none"
					hx-delete={ fmt.Sprintf("/grid/%s", getField(row, "Id")) }
					hx-swap="outerHTML swap:1s"
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"></path>
					</svg>
				</button>
				<button
					id="updateRow"
					class="text-gray-500 transition-colors duration-200 :hover:text-yellow-500 :text-gray-300 hover:text-yellow-500 focus:outline-none"
					hx-get={ fmt.Sprintf("/grid/edit/%s", getField(row, "Id")) }
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"></path>
					</svg>
				</button>
			</div>
		</td>
	</tr>
}

templ rowRenderer(row any, column models.GridColumn) {
	switch column.Renderer {
		case "name":
			<td class="px-4 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
				<div class="inline-flex items-center gap-x-3">
					<div class="flex items-center gap-x-2">
						<div>
							<h2 class="font-medium text-gray-800 :text-white ">
								{ fmt.Sprintf("%s", getField(row,"Name")) }
							</h2>
							<p class="text-sm font-normal text-gray-600 :text-gray-400">
								{ fmt.Sprintf("%s", getField(row,"Id")) }
							</p>
						</div>
					</div>
				</div>
			</td>
		case "status":
			<td class="px-12 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
				<div class="inline-flex items-center px-3 py-1 rounded-full gap-x-2 bg-emerald-100/60 :bg-gray-800">
					<span class="h-1.5 w-1.5 rounded-full bg-emerald-500"></span>
					<h2 class="text-sm font-normal text-emerald-500">{ utils.StartCase(fmt.Sprintf("%s", getField(row,column.Key))) }</h2>
				</div>
			</td>
		case "badges":
			if arr, ok := getField(row,column.Key).([]string); ok {
				<td class="px-4 py-4 text-sm whitespace-nowrap">
					<div class="flex items-center gap-x-2">
						for _,item := range arr {
							<p class="px-3 py-1 text-xs text-indigo-500 rounded-full :bg-gray-800 bg-indigo-100/60">{ item }</p>
						}
					</div>
				</td>
			} else {
				<td class="px-4 py-4 text-sm text-gray-500 :text-gray-300 whitespace-nowrap">
					{ fmt.Sprintf("%s", getField(row,column.Key)) }
				</td>
			}
		default:
			<td class="px-4 py-4 text-sm text-gray-500 :text-gray-300 whitespace-nowrap">
				{ fmt.Sprintf("%s", getField(row,column.Key)) }
			</td>
	}
}

templ renderEditableGridRow[D any](columns []models.GridColumn, row D) {
	<tr class="editing" hx-trigger="cancel">
		for _, column := range columns {
			if column.Editable {
				if column.EditOptions.EditType == models.EditInput {
					<td class="px-4 py-4 text-sm text-gray-500 :text-gray-300 whitespace-nowrap">
						@components.Input(models.InputProps{
							Id:       fmt.Sprintf("%s", getField(row, column.EditOptions.EditProps.(models.GridInputEditProps).Id)),
							Typ:      column.EditOptions.EditProps.(models.GridInputEditProps).Typ,
							Name:     column.EditOptions.EditProps.(models.GridInputEditProps).Name, //make pluck or default here
							Value:    fmt.Sprintf("%s", getField(row, column.Key)),
							Class:    column.EditOptions.EditProps.(models.GridInputEditProps).Class,
							Required: true,
						})
					</td>
				} else if column.EditOptions.EditType == models.EditSelect {
					<td class="px-12 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
						<div class="inline-flex items-center rounded-full gap-x-2 :bg-gray-800">
							<h2 class="text-sm font-normal text-emerald-500">
								@components.Select(models.SelectProps{
									Id:    fmt.Sprintf("%s", getField(row, column.EditOptions.EditProps.(models.GridSelectEditProps).Id)),
									Name:  column.EditOptions.EditProps.(models.GridSelectEditProps).Name,
									Class: column.EditOptions.EditProps.(models.GridSelectEditProps).Class,
									DefaultValue: models.SelectOption{
										Label: utils.StartCase(fmt.Sprintf("%s", getField(row, column.Key))),
										Value: fmt.Sprintf("%s", getField(row, column.Key)),
									},
									Options: column.EditOptions.EditProps.(models.GridSelectEditProps).Options,
								})
							</h2>
						</div>
					</td>
				}
			} else {
				@rowRenderer(row, column)
			}
		}
		<td class="px-4 py-4 text-sm whitespace-nowrap">
			<div class="flex items-center gap-x-6">
				<div class="inline-flex overflow-hidden rounded-md border bg-white shadow-sm">
					<button
						class="inline-block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:relative"
						hx-put={ fmt.Sprintf("/grid/%s", getField(row, "Id")) }
						hx-include="closest tr"
						id="saveRow"
					>
						<span>Save</span>
					</button>
					<button
						class="inline-block px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:relative"
						hx-get={ fmt.Sprintf("/grid/%s", getField(row, "Id")) }
					>
						<span>Cancel</span>
					</button>
				</div>
			</div>
		</td>
	</tr>
}

templ gridUtils(title string, subtitle string, description string) {
	<div class="sm:flex sm:items-center sm:justify-between">
		<div>
			<div class="flex items-center gap-x-3">
				<h2 class="text-lg font-medium text-gray-800 :text-white">{ title }</h2>
				if subtitle != "" {
					<span class="px-3 py-1 text-xs text-blue-600 bg-blue-100 rounded-full :bg-gray-800 :text-blue-400">240 vendors</span>
				}
			</div>
			<p class="mt-1 text-sm text-gray-500 :text-gray-300">{ description }</p>
		</div>
		<div class="flex items-center mt-4 gap-x-3">
			<button disabled class="flex items-center justify-center w-1/2 px-5 py-2 text-sm text-gray-700 transition-colors duration-200 bg-white border rounded-lg gap-x-2 sm:w-auto :hover:bg-gray-800 :bg-gray-900 hover:bg-gray-100 :text-gray-200 :border-gray-700">
				<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
					<g clip-path="url(#clip0_3098_154395)">
						<path d="M13.3333 13.3332L9.99997 9.9999M9.99997 9.9999L6.66663 13.3332M9.99997 9.9999V17.4999M16.9916 15.3249C17.8044 14.8818 18.4465 14.1806 18.8165 13.3321C19.1866 12.4835 19.2635 11.5359 19.0351 10.6388C18.8068 9.7417 18.2862 8.94616 17.5555 8.37778C16.8248 7.80939 15.9257 7.50052 15 7.4999H13.95C13.6977 6.52427 13.2276 5.61852 12.5749 4.85073C11.9222 4.08295 11.104 3.47311 10.1817 3.06708C9.25943 2.66104 8.25709 2.46937 7.25006 2.50647C6.24304 2.54358 5.25752 2.80849 4.36761 3.28129C3.47771 3.7541 2.70656 4.42249 2.11215 5.23622C1.51774 6.04996 1.11554 6.98785 0.935783 7.9794C0.756025 8.97095 0.803388 9.99035 1.07431 10.961C1.34523 11.9316 1.83267 12.8281 2.49997 13.5832" stroke="currentColor" stroke-width="1.67" stroke-linecap="round" stroke-linejoin="round"></path>
					</g>
					<defs>
						<clipPath id="clip0_3098_154395">
							<rect width="20" height="20" fill="white"></rect>
						</clipPath>
					</defs>
				</svg>
				<span>Export</span>
			</button>
			<button class="flex items-center justify-center w-1/2 px-5 py-2 text-sm tracking-wide text-white transition-colors duration-200 bg-blue-500 rounded-lg shrink-0 sm:w-auto gap-x-2 hover:bg-blue-600 :hover:bg-blue-500 :bg-blue-600">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
					<path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				<span>Add Users</span>
			</button>
		</div>
	</div>
	<div class="my-6 flex-row md:flex md:items-center md:justify-between" x-data="{ isOpen: false }">
		<div class="inline-flex overflow-hidden bg-white border divide-x rounded-lg :bg-gray-900 rtl:flex-row-reverse :border-gray-700 :divide-gray-700">
			<button
				class="px-5 py-2 text-xs font-medium text-gray-600 transition-colors duration-200 bg-gray-100 sm:text-sm :bg-gray-800 :text-gray-300"
				@click="isOpen = true"
			>
				Apply Filter
			</button>
			<button
				hx-get="/grid"
				hx-target="body"
				class="px-5 py-2 text-xs font-medium text-gray-600 transition-colors duration-200 sm:text-sm :hover:bg-gray-800 :text-gray-300 hover:bg-gray-100"
			>
				Reset Filters
			</button>
		</div>
		@formModal("Name", "name")
		<div class="flex items-center mt-4 md:mt-0">
			<span class="absolute">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mx-3 text-gray-400 :text-gray-600">
					<path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path>
				</svg>
			</span>
			<input type="text" placeholder="Search" class="block w-full py-1.5 pr-5 text-gray-700 bg-white border border-gray-200 rounded-lg md:w-80 placeholder-gray-400/70 pl-11 rtl:pr-11 rtl:pl-5 :bg-gray-900 :text-gray-300 :border-gray-600 focus:border-blue-400 :focus:border-blue-300 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"/>
		</div>
	</div>
}

templ grid[D any](gridCtx models.GridContext[models.GridColumn], gridData []D, pageOptions models.GridPagination) {
	<section class="container px-4 mx-auto my-4">
		@gridUtils("Users", "", "Example Gird with filters, pagination, export etc...")
		<div class="flex flex-col">
			<div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
				<div class="min-w-full py-2 align-middle md:px-6 lg:px-8">
					<div class="overflow-hidden border border-gray-200 :border-gray-700 md:rounded-lg">
						<table class="min-w-full divide-y divide-gray-200 :divide-gray-700 tr htmx-swapping">
							@gridHeader(gridCtx.Columns)
							<tbody
								class="bg-white divide-y divide-gray-200 :divide-gray-700 :bg-gray-900"
								hx-target="closest tr"
								hx-swap="outerHTML"
							>
								for _,row := range gridData {
									@renderGridRow(gridCtx.Columns, row)
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		@gridPagination(pageOptions)
	</section>
}

templ formModal(label string, name string) {
	<div class="relative flex justify-end">
		<form
			x-show="isOpen"
			x-transition:enter="transition duration-300 ease-out"
			x-transition:enter-start="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
			x-transition:enter-end="translate-y-0 opacity-100 sm:scale-100"
			x-transition:leave="transition duration-150 ease-in"
			x-transition:leave-start="translate-y-0 opacity-100 sm:scale-100"
			x-transition:leave-end="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
			class="fixed inset-0 z-10 overflow-y-auto"
			aria-labelledby="modal-title"
			role="dialog"
			aria-modal="false"
			hx-post="/grid"
			hx-target="body"
		>
			<div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
				<span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
				<div class="relative inline-block px-4 pt-5 pb-4 overflow-hidden text-left align-bottom transition-all transform bg-white rounded-lg shadow-xl rtl:text-right services:bg-gray-900 sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6">
					<div class="mt-4">
						@components.Input(models.InputProps{
							Id:       label,
							Typ:      models.InputTypeText,
							Name:     name,
							Label:    label,
							Class:    "mt-1 w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 shadow-sm",
							Required: true,
						})
					</div>
					<div class="mt-5 sm:flex sm:items-center justify-center">
						<div class="sm:flex sm:items-center ">
							<button
								type="reset"
								@click="isOpen = false"
								class="w-full px-4 py-2 mt-2 text-sm font-medium tracking-wide text-gray-700 capitalize transition-colors duration-300 transform border border-gray-200 rounded-md sm:mt-0 sm:w-auto sm:mx-2 services:text-gray-200 services:border-gray-700 services:hover:bg-gray-800 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-gray-300 focus:ring-opacity-40"
							>
								Cancel
							</button>
							<button
								type="submit"
								class="w-full px-4 py-2 mt-2 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-600 rounded-md sm:w-auto sm:mt-0 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40"
							>
								Submit
							</button>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
}

templ Grid[D any](gridCtx models.GridContext[models.GridColumn], gridData []D, pageOptions models.GridPagination) {
	@layout.Base("HTMX Grid") {
		@grid(gridCtx, gridData, pageOptions)
	}
}

templ EditRow[D any](columns []models.GridColumn, row D) {
	@renderEditableGridRow(columns, row)
}

templ RenderRow[D any](columns []models.GridColumn, row D) {
	@renderGridRow(columns, row)
}

// getField retrieves the value of a field by name using reflection
func getField[D any](data D, fieldName string) interface{} {
	// Get the reflect.Value of the struct
	value := reflect.ValueOf(data)

	// Get the field by name
	field := value.FieldByName(fieldName)

	// Check if the field is valid
	if !field.IsValid() {
		fmt.Println("Field not found:", fieldName)
		return ""
	}

	// Convert the field value to string and return
	if field.Kind() == reflect.Slice {
		if field.Len() > 0 {
			var arr = make([]string, 0)
			for i := 0; i < field.Len(); i++ {
				arr = append(arr, fmt.Sprintf("%s", field.Index(i)))
			}
			return arr

		} else {
			return make([]string, 0)
		}
	}

	return field
}
